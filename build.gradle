
// buildscript 代码块中脚本优先执行
buildscript {
    ext {springBootVersion = '2.1.14.RELEASE'}
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

// 使用插件
plugins {
    id 'org.springframework.boot' version '2.1.14.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven'
    id 'war' //build 下出现war
}


group = 'com.demo.gradleconf'
version = '0.0.1-SNAPSHOT'
//指定编译 .java 文件的 JDK 版本
sourceCompatibility = '1.8'


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

repositories {
    //使用本地仓库
    mavenLocal()
    //使用阿里云仓库
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    //使用固定的maven中心仓库
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql:42.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.springfox:springfox-swagger2:2.9.2'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'org.flywaydb:flyway-core'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    runtimeOnly 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    //tools jar
    // 添加  Apache Commons Lang 依赖
    implementation 'org.apache.commons:commons-lang3:3.5'
    // 添加 MySQL连接驱动 的依赖
    implementation 'mysql:mysql-connector-java:6.0.5'
}



//删除 旧的.jar包 任务
task clearJar(type: Delete) {
    FileTree tree = fileTree("build/libs/test")
    tree.visit {
        element ->
            if (element.getName().endsWith(".jar")) {
                println "$element.file.name" + " " + element.getName()
                delete element.file
            }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}



task makeJar(type: Jar){
    //指定生成的jar名
    baseName "jar-name"+ "-"+releaseTime()

    version = '1.0.2'
    manifest {
        attributes 'Main-Class':'com.demo.gradleconf.Test'
    }

    //从哪里打包class文件
    from('out/production/classes')

    //打包到jar后的目录结构(jar包内最外层目录)
    into('')
    //目标文件夹//不配置该项,默认问ｂuild/libs下
    destinationDir = file('build/libs/test')

//    from zipTree(zipFile)
//    from fileTree(dir:'src/main',includes:['assets/**']) //包含assets文件

    //去掉不需要打包的目录和文件
//    exclude('BuildConfig.class','R.class')
//    //去掉R$开头的文件
//    exclude{it.name.startsWith('R$')}
}


makeJar.dependsOn(clearJar,build)


gradle.taskGraph.afterTask {
    println("每个 task 执行完成会调这个接口")
}